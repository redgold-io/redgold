[package]
name = "redgold"
version = "0.1.33"
edition = "2021"
authors = ["Redgold"]
description = "Decentralized Portfolio Contracts & Data Lake"
documentation = "https://dev.docs.redgold.io/"
readme = "README.md"
homepage = "https://redgold.io"
repository = "https://github.com/redgold-io/redgold"
license = "MIT"
keywords = ["crypto", "cryptocurrency", "reputation", "decentralized", "p2p"]
categories = ["cryptography::cryptocurrencies"]


[workspace]
members = [
    "data",
    "schema",
    "sdk",
    "crates/executor",
    "keys",
    "sdk-client",
    "crates/fs",
    "gui",
    "crates/common",
    "crates/common-no-wasm",
    "crates/crawler",
    "crates/crawler-native",
    "crates/rpc-integ",
    "crates/node-core",
    "crates/ci",
    "crates/ops",
]
exclude = ["examples/experiments/rust_wasm", "ai", "ai-py"]


[workspace.package]
version = "0.1.5"
edition = "2021"
authors = ["Redgold"]
description = "A relative proof conflict resolution & irreversibility service with trust modeling custodial pooling and executor contracts"
documentation = "https://dev.docs.redgold.io/"
readme = "README.md"
homepage = "https://redgold.io"
repository = "https://github.com/redgold-io/redgold"
license = "MIT"
keywords = ["crypto", "cryptocurrency", "reputation", "decentralized", "p2p"]
categories = ["cryptography::cryptocurrencies"]


[package.metadata.bundle]
name = "redgold"
identifier = "io.redgold"
icon = ["src/resources/images/historical/design_one/logo_orig_crop.png"]
# resources # maybe include this later if necessary?
copyright = "Redgold Labs LLC 2020"
category = "public.app-category.finance"
description = "Crypto portfolio/ETF contract network"


[workspace.dependencies]
redgold-schema = { path = "schema", version = "0.1.33"}
redgold-data = { path = "data", version = "0.1.33"}
redgold-keys = { path = "keys", version = "0.1.33"}
redgold-executor = { path = "crates/executor"}
redgold-sdk-client = { path = "sdk-client", version = "0.1.33"}
redgold-rpc-integ = { path = "crates/rpc-integ" }
redgold-node-core = { path = "crates/node-core" }
redgold-ci = { path = "crates/ci" }
redgold-crawler = { path = "crates/crawler" }
redgold-crawler-native = { path = "crates/crawler-native" }
redgold-gui = { path = "./gui"}
redgold-common = { path = "crates/common" }
redgold-common-no-wasm = { path = "crates/common-no-wasm" }
redgold-fs = { path = "crates/fs" }
redgold-ops = { path = "crates/ops" }

parquet_derive = "53.3.0"
hex = "0.4.3"
serde = { version = "1.0.130", features = ["default", "derive"] }
serde_json = "1.0.59"
serde_with = { version = "3.2.0", features = ["hex"] }
itertools = "0.10.1"
log = "0.4.14"
metrics = "0.22.0"
dirs = "5.0.1"
sha3 = "0.10.8"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
rand = '0.8.4'
tokio = { version = "1.41.1", features = ["io-util", "io-std", "macros", "rt", "rt-multi-thread", "process"] }
futures = "0.3.1"
async-trait = "0.1.56"
num-bigint = "0.4"
toml = "0.8.12"
arc-swap = { version = "1.7.1", default-features = true }
flume = { version = "0.11.0", features = ["futures-core", "futures-sink", "default"] }
qrencode = "0.14.0"
csscolorparser = "0.6.2"
# enum stuff
strum = "0.26.3"
strum_macros = "0.26.4"


[dependencies]
redgold-ci = { workspace = true }
strum = {workspace = true}
strum_macros = {workspace = true}
dhat = "0.3.3"
redgold-crawler = {workspace = true}
redgold-schema = {workspace = true}

redgold-gui = {workspace = true}
redgold-common = {workspace = true}
redgold-common-no-wasm = {workspace = true}
redgold-ops = {workspace = true}
arc-swap = {workspace = true}
sha3 = {workspace = true}
flume = {workspace = true}
#redgold-sdk-client = {workspace = true}
tempfile = "3.3.0"
argon2 = "0.5.0"
dirs = "5.0.1"
#backtrace = "0.3.65"
num-bigint = { workspace = true }
dotenv = "0.15.0"
futures = {workspace = true}
# Used for Sha256 but can be deprecated
rust-crypto = "0.2.36"
# only used in schema?
toml = {workspace = true}

dashmap = "5.5.0"
# Deprecate after moving into data module -- only for build

crossbeam = "0.8.1"
uuid = { version = "1.3.3", features = ["serde", "v4", "v1"] }
# GUI Alone
# TODO: remove these in favor of the module
eframe = "0.30.0" # Gives us egui, epi and web+native backends
egui_extras = {version = "0.30.0", features = ["default", "image", "all_loaders"]}

image = { version = "0.24.6", default-features = false, features = ["jpeg", "png"] }
rqrr = "0.6.0"

#zxcvbn = '2.1.1'
rand = { workspace = true}
clap = { version = "4.5.21", features = ["derive", "env"] }
log = "0.4.14"
hex = "0.4.3"
#void = "1.0.2"
# Is this used anymore?
#async-std = { version = "1.6.2", features = ["attributes"] }
async-trait = { workspace = true }
env_logger = "0.10.0"
#structopt = "0.3.21"
warp = {version = "0.3", features = ["tls", "default"]}
reqwest = { version = "0.11", features = ["json"] }
serde = "1.0.130"
serde_json = "1.0.59"
base64 = "0.21.2"
serde_with = { version = "3.2.0", features = ["hex"] }

# Observability
log4rs = "1.0.0"
metrics = { workspace = true }
metrics-exporter-prometheus = "0.13.0"
tracing = { workspace = true }
tracing-subscriber = { workspace = true }

# Ops
#ssh2 = "0.9.2"

# Move to trust module
ndarray = "0.15.3"
chrono = "0.4.19"
config = { version = "0.14.0", features = ["toml"] }

#priority-queue = "1.2.0"

itertools = "0.10.1"
bytes = "1.1.0"

#Dependencies for multiparty threshold ecdsa
multi-party-ecdsa = "0.8.1"
anyhow = "1"
round-based = { version = "0.1.4", features = [] }
async-sse = "5"
rocket = { version = "0.5.0-rc.3", default-features = false, features = ["json"] }
thiserror = "1.0.23"
surf = "2"
curv-kzen = { version = "0.9", default-features = false }

# conflict with multi-party-ecdsa
tokio = { workspace = true }
tokio-util = { version = "0.7.8", features = ["default", "net", "codec"] }
tokio-stream = "0.1.14"

csv = "1.1"
rpassword = "7.2.0"

nix = { version = "0.26.4", features = ["user"] }

qrencode = {workspace = true}
csscolorparser = {workspace = true}

bdk = {package="bdk-debug", version = "0.28.1-debug", features = ["default", "keys-bip39", "bip39"]}
derivative = "2.2.0"
backtrace = "0.3.72"
num_cpus = "1.16.0"
mime_guess = "2.0.5"

[dependencies.getrandom]
version = "0.2.12"
features = ["js"]

[build-dependencies]
pkg-config = "0.3.27"

[dev-dependencies]
assert_cmd = "2.0.11"

[profile.dev.package.sqlx-macros]
opt-level = 3

[profile.dev]
opt-level = 0
debug = true
# Increase stack size to 8MB (default is often 2MB)
codegen-units = 1
overflow-checks = true
#lto = "thin"  # Use thin LTO
#rustc-args = ["-C", "link-arg=-fuse-ld=lld"]  # Only affects dev profile

#
[profile.ci]
inherits = "dev"
rustc-args = [
    "-C", "link-arg=-Wl,--no-as-needed",
    "-C", "link-arg=-Wl,--strip-debug",
    "-C", "link-arg=-Wl,--gc-sections",
    "-C", "link-arg=-Wl,--no-keep-memory",
    "-C", "link-arg=-Wl,--no-undefined",
    "-C", "link-arg=-Wl,--warn-common",
    "-C", "link-arg=-undefined",
    "-C", "link-arg=dynamic_lookup",
    "-C", "codegen-units=1",
    "-C", "opt-level=z",
    "-C", "prefer-dynamic",
    "-C", "target-cpu=native",
]

[profile.release]
codegen-units=1
lto = true
opt-level = 1

[target.'cfg(not(all(target_arch = "wasm32", target_os = "unknown")))'.dependencies]
redgold-data = {workspace = true}
redgold-keys = {workspace = true}
redgold-executor = {workspace = true}
aws-config = "0.55.1" #Dependencies for email sending
aws-sdk-sesv2 = "0.28.0" #Dependencies for email sending
aws-sdk-s3 = "0.28.0" #Dependencies for email sending
dns-lookup = "2.0.2" #Dependencies for email sending

# Broken on mac CI builds, but works in local tests for QR image code captures.
# Re-enable later
#openpnp_capture = "0.2.4"
#openpnp_capture_sys = "0.4.0"
#
#[target.'cfg(unix)'.rustflags]
## Linux systems
#rustflags = ["-C", "link-args=-Wl,-z,stack-size=128000000"]
#
#[target.'cfg(windows)'.rustflags]
## Windows systems
#rustflags = ["-C", "link-args=/STACK:128000000"]
#
#[target.'cfg(target_os = "macos")'.rustflags]
## macOS systems
#rustflags = ["-C", "link-args=-Wl,-stack_size,128000000"]

[target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "link-args=-Wl,-z,stack-size=128000000"]

[target.x86_64-pc-windows-msvc]
rustflags = ["-C", "link-args=/STACK:128000000"]

[target.x86_64-apple-darwin]
rustflags = ["-C", "link-args=-Wl,-stack_size,128000000"]


#[target.'cfg(target_os = "macos")']
#rustflags = ["-C", "link-arg=-Wl,-stack_size,81920000"]


[target.'cfg(target_os = "linux")'.dependencies]
redgold-fs = {workspace = true}
