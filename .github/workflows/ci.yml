name: ci
env:
  BUILD_OUTPUT: "./target/release/redgold"
  AWS_EC2_METADATA_DISABLED: true
  S3_RELEASE_PREFIX: "s3://redgold-public/release"
  DOCKER_USER: "redgoldio"
on: push
jobs:
  test:
    if:
      ${{ !contains('
      refs/heads/predev
      refs/heads/dev
      refs/heads/staging
      refs/heads/test
      refs/heads/main
      ', github.ref) }}
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    env:
      DATABASE_URL: "sqlite:///home/runner/work/redgold-core/redgold-core/.rg/sqlx/data_store.sqlite"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true
      - run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - run: echo "Github branch = ${{ env.BRANCH }}"
      - run: export VERSION=$(head Cargo.toml | grep 'version = ' | cut -d "=" -f 2 | tr -d ' "'); echo "VERSION=$VERSION" >> $GITHUB_ENV
      - run: echo "Testing version = ${{ env.VERSION }}"
      - run: ./bin/install_build_deps.sh
      - run: ./bin/test.sh
  build-linux:
#    needs: [test]
    if:
      contains('
      refs/heads/predev
      refs/heads/dev
      refs/heads/staging
      refs/heads/test
      refs/heads/main
      ', github.ref)
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    env:
      DATABASE_URL: "sqlite:///home/runner/work/redgold-core/redgold-core/.rg/sqlx/data_store.sqlite"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true
        # TODO: Update to use release plugin
        #      - run: cargo install cargo-release
        #      - run: cargo release # --execute --no-confirm --token ${{ secrets.GITHUB_TOKEN }}
      - run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - run: echo "Github branch = ${{ env.BRANCH }}"
      - run: export VERSION=$(head Cargo.toml | grep 'version = ' | cut -d "=" -f 2 | tr -d ' "'); echo "VERSION=$VERSION" >> $GITHUB_ENV
      - run: echo "Testing version = ${{ env.VERSION }}"
      - run: ./bin/install_build_deps.sh
      - run: ./bin/test.sh
      - run: cargo build --release
      - run: cp ${{ env.BUILD_OUTPUT }} ./redgold_linux

      - uses: actions/upload-artifact@v3
        with:
          name: redgold_linux
          path: ./redgold_linux

#  build-mac:
#    needs: [test]
#    if:
#      contains('
#      refs/heads/dev
#      refs/heads/staging
#      refs/heads/test
#      refs/heads/main
#      ', github.ref)
#    runs-on: macos-latest
#    permissions:
#      contents: write
#    env:
#      DATABASE_URL: "sqlite:///Users/runner/work/redgold-core/redgold-core/.rg/sqlx/data_store.sqlite"
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v1
#      - name: Cache Rust dependencies
#        uses: actions/cache@v1.0.1
#        with:
#          path: target
#          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
#          restore-keys: |
#            ${{ runner.OS }}-build-
#      - name: Install latest rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          target: x86_64-apple-darwin
#          default: true
#          override: true
#
#      - run: brew install llvm@12
#      - run: echo 'export PATH="/usr/local/opt/llvm@12/bin:$PATH"' >> /Users/runner/.bash_profile
#      - run: echo $(llvm-config --version)
#
#      - run: cargo build --all --release
#      - run: cp ${{ env.BUILD_OUTPUT }} ./redgold_mac
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: redgold_mac
#          path: ./redgold_mac

  release:
    needs: [build-linux] #, build-mac]
    if:
        contains('
          refs/heads/predev
          refs/heads/dev
          refs/heads/staging
          refs/heads/test
          refs/heads/main
          ', github.ref)
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - uses: actions/download-artifact@v3
        with:
          name: redgold_linux
#      - uses: actions/download-artifact@v3
#        with:
#          name: redgold_mac
      - run: ls -lA .
      - run: ls -lA ./redgold_linux


      - run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - run: echo "Github branch = ${{ env.BRANCH }}"
      - run: export VERSION=$(head Cargo.toml | grep 'version = ' | cut -d "=" -f 2 | tr -d ' "'); echo "VERSION=$VERSION" >> $GITHUB_ENV
      - run: echo "Testing version = ${{ env.VERSION }}"

      # Checksums
      - run: echo "BUILD_CHECKSUM=$(md5sum ./redgold_linux | cut -d ' ' -f 1 | tr -d ' ')" >> $GITHUB_ENV
      - run: echo "BUILD_CHECKSUM_SHA256=$(shasum -a 256 ./redgold_linux | cut -d ' ' -f 1 | tr -d ' ')" >> $GITHUB_ENV
      - run: echo "BUILD_CHECKSUM_SHA512=$(shasum -a 512 ./redgold_linux | cut -d ' ' -f 1 | tr -d ' ')" >> $GITHUB_ENV

#      - run: echo "MAC_BUILD_CHECKSUM=$(md5sum ./redgold_mac | cut -d ' ' -f 1 | tr -d ' ')" >> $GITHUB_ENV
#      - run: echo "MAC_BUILD_CHECKSUM_SHA256=$(shasum -a 256 ./redgold_mac | cut -d ' ' -f 1 | tr -d ' ')" >> $GITHUB_ENV
#      - run: echo "MAC_BUILD_CHECKSUM_SHA512=$(shasum -a 512 ./redgold_mac | cut -d ' ' -f 1 | tr -d ' ')" >> $GITHUB_ENV

      # Docker Image
      # TODO: This works but need to setup self hosted registry also
      - run: rm -rf docker-build-tmp || true
      - run: mkdir docker-build-tmp
      - run: cp ./redgold_linux docker-build-tmp/redgold; chmod +x docker-build-tmp/redgold
      - run: cp release.Dockerfile docker-build-tmp/release.Dockerfile
      - run: docker rmi --force ${{ env.DOCKER_USER }}/redgold:${{env.VERSION}} || true
      - run: docker rmi --force ${{ env.DOCKER_USER }}/redgold:${{ env.BRANCH }} || true
      - run: cd docker-build-tmp; docker build -f release.Dockerfile -t ${{ env.DOCKER_USER }}/redgold:${{env.VERSION}} .; cd ..
      - run: echo ${{ secrets.DOCKER_TOKEN }} | docker login --username ${{ env.DOCKER_USER }} --password-stdin
      - run: docker tag ${{ env.DOCKER_USER }}/redgold:${{env.VERSION}} ${{ env.DOCKER_USER }}/redgold:${{ env.BRANCH }}
      - run: docker image push ${{ env.DOCKER_USER }}/redgold:${{env.VERSION}}
      - run: docker image push ${{ env.DOCKER_USER }}/redgold:${{ env.BRANCH }}

      # Todo: change to output https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
      - run: export DOCKER_SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.DOCKER_USER }}/redgold:${{env.VERSION}} | cut -d ':' -f 2 | tr -d ' '); echo "DOCKER_SHA256=$DOCKER_SHA256" >> $GITHUB_ENV

      # AWS artifacts
      - run: curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - run: unzip awscliv2.zip
      - run: sudo ./aws/install --update
      - run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS }}
      - run: aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET }}

      # AWS Docker image hash
      - run: echo ${{ env.DOCKER_SHA256 }} > docker_sha256_checksum
      - run: aws s3 cp docker_sha256_checksum ${{ env.S3_RELEASE_PREFIX }}/${{ env.BRANCH }}/docker_sha256_checksum
      - run: aws s3 cp docker_sha256_checksum ${{ env.S3_RELEASE_PREFIX }}/v/${{env.VERSION}}/docker_sha256_checksum

      # AWS Linux artifacts
      - run: echo ${{ env.BUILD_CHECKSUM }} > md5_checksum
      - run: echo ${{ env.BUILD_CHECKSUM_SHA256 }} > sha256_checksum
      - run: echo ${{ env.BUILD_CHECKSUM_SHA512 }} > sha512_checksum

      # TODO: commit hash to file upload ${{ github.sha }}
      - run: aws s3 cp redgold_linux ${{ env.S3_RELEASE_PREFIX }}/${{ env.BRANCH }}/redgold_linux
      - run: aws s3 cp md5_checksum ${{ env.S3_RELEASE_PREFIX }}/${{ env.BRANCH }}/redgold_linux_md5_checksum
      - run: aws s3 cp sha256_checksum ${{ env.S3_RELEASE_PREFIX }}/${{ env.BRANCH }}/redgold_linux_sha256_checksum
      - run: aws s3 cp sha512_checksum ${{ env.S3_RELEASE_PREFIX }}/${{ env.BRANCH }}/redgold_linux_sha512_checksum

      - run: aws s3 cp redgold_linux ${{ env.S3_RELEASE_PREFIX }}/v/${{env.VERSION}}/redgold_linux
      - run: aws s3 cp md5_checksum ${{ env.S3_RELEASE_PREFIX }}/v/${{env.VERSION}}/redgold_linux_md5_checksum
      - run: aws s3 cp sha256_checksum ${{ env.S3_RELEASE_PREFIX }}/v/${{env.VERSION}}/redgold_linux_sha256_checksum
      - run: aws s3 cp sha512_checksum ${{ env.S3_RELEASE_PREFIX }}/v/${{env.VERSION}}/redgold_linux_sha512_checksum

      # AWS Mac artifacts
#
#      - run: echo ${{ env.MAC_BUILD_CHECKSUM }} > mac_md5_checksum
#      - run: echo ${{ env.MAC_BUILD_CHECKSUM_SHA256 }} > mac_sha256_checksum
#      - run: echo ${{ env.MAC_BUILD_CHECKSUM_SHA512 }} > mac_sha512_checksum
#
#      - run: aws s3 cp redgold_mac ${{ env.S3_RELEASE_PREFIX }}/${{ env.BRANCH }}/redgold_mac
#      - run: aws s3 cp mac_md5_checksum ${{ env.S3_RELEASE_PREFIX }}/${{ env.BRANCH }}/redgold_mac_md5_checksum
#      - run: aws s3 cp mac_sha256_checksum ${{ env.S3_RELEASE_PREFIX }}/${{ env.BRANCH }}/redgold_mac_sha256_checksum
#      - run: aws s3 cp mac_sha512_checksum ${{ env.S3_RELEASE_PREFIX }}/${{ env.BRANCH }}/redgold_mac_sha512_checksum
#
#      - run: aws s3 cp redgold_mac ${{ env.S3_RELEASE_PREFIX }}/v/${{env.VERSION}}/redgold_mac
#      - run: aws s3 cp mac_md5_checksum ${{ env.S3_RELEASE_PREFIX }}/v/${{env.VERSION}}/redgold_mac_md5_checksum
#      - run: aws s3 cp mac_sha256_checksum ${{ env.S3_RELEASE_PREFIX }}/v/${{env.VERSION}}/redgold_mac_sha256_checksum
#      - run: aws s3 cp mac_sha512_checksum ${{ env.S3_RELEASE_PREFIX }}/v/${{env.VERSION}}/redgold_mac_sha512_checksum

#      - uses: dev-drprasad/delete-tag-and-release@v0.2.1
#        with:
#          tag_name: v0.1.0 #(required) tag name to delete
#          github_token: ${{ secrets.GITHUB_TOKEN }} # (required) a GitHub token with write access to the repo that needs to be modified
#          delete_release: true #(optional) default: true
#          repo: <owner>/<repoName> #(optional) target repository. default: repo running this action
      - uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true # default: false
          tag_name: release/${{ env.BRANCH }} # tag name to delete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # https://github.com/marketplace/actions/rust-release-binary these steps came from below
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            redgold_linux
            redgold_mac
          tag_name: "release/${{ env.BRANCH }}"
          name: ${{ env.BRANCH }}
          body: "
          Redgold ${{ env.BRANCH }} Release
          
          COMMIT_HASH=${{ github.sha }}
          
          DOCKER_SHA256=${{ env.DOCKER_SHA256 }}

          LINUX_MD5=${{ env.BUILD_CHECKSUM }}
           
          LINUX_SHA256=${{ env.BUILD_CHECKSUM_SHA256 }}
           
          LINUX_SHA512=${{ env.BUILD_CHECKSUM_SHA512 }}
          
          MAC_MD5=${{ env.MAC_BUILD_CHECKSUM }}
           
          MAC_SHA256=${{ env.MAC_BUILD_CHECKSUM_SHA256 }}
          
          MAC_SHA512=${{ env.MAC_BUILD_CHECKSUM_SHA512 }}
          
          
          "
          token: ${{ secrets.GITHUB_TOKEN }}
